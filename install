#!/usr/bin/env bash
#
# Copyright (c) 2015 Joyent Inc., All rights reserved.
#
# Install Alpine into a directory, modify the installation, then tar it up.
#

if [[ -n "$TRACE" ]]; then
  export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  set -o xtrace
fi

set -euo pipefail
IFS=$'\n\t'

GUESTTOOLS=guesttools
BUILD_DATE=$(date +%Y%m%d)

export PATH=$PATH:/sbin:/bin

usage() {
cat <<EOF

Install and modify Alpine in a given directory in a given directory using a given mirror

Usage:
  $0 -r <RELEASE> -a <APK_TOOLS> -d <INSTALL_DIR> -m <MIRROR> -i <IMAGE_NAME> -p <NAME> -D <DESC> -u <DOCS>

Example:
  $0 -r 3.1 -a apk-tools-static-2.6.1-r0.apk -d /data/alpine -m http://mirrors.gigenet.com/alpinelinux/ -i alpine-3 -p "Alpine Linux" -D "Alpine 3.1.3 64-bit lx-brand image." -u https://docs.joyent.com/images/container-native-linux

OPTIONS:
  -r The desired release (e.g "3.2")
  -a The required apk-tools-static package (e.g. apk-tools-static-2.6.1-r0.apk)
  -d A path to the install directory
  -m A URL for the desired archive mirror
  -i The name of the image. This is used for naming the tarball.
  -p The proper name of the image. Use quotes. This is used in the MOTD and /etc/product file.
  -D A description for the image. This is used in the image manifest and the /etc/product file.
  -u A URL to the image docs [optional]
  -h Show this message

EOF
}

RELEASE=
APK_TOOLS=
INSTALL_DIR=
MIRROR=
IMAGE_NAME=
NAME=
DESC=
DOCS=

while getopts "hr:a:d:m:i:p:D:u:" OPTION
do
	case $OPTION in
		h)
			usage
			exit
			;;
		r)
			RELEASE=${OPTARG}
			;;
		a)
			APK_TOOLS=${OPTARG}
			;;
		d)
			INSTALL_DIR=${OPTARG%/}
			;;
		m)
			MIRROR=${OPTARG%/}
			;;
		i)
			IMAGE_NAME=${OPTARG}
			;;
		p)
			NAME=${OPTARG}
			;;
		D)
			DESC=${OPTARG}
			;;
		u)
			DOCS=${OPTARG}
			;;
		\?)
			usage
			exit
			;;
	esac
done

if [[ $# -eq 0 ]]; then
	usage
	exit 1
fi

if [[ -z ${RELEASE} ]]; then
	echo "Error: missing release (-r) value"
	exit 1
fi

if [[ -z ${APK_TOOLS} ]]; then
	echo "Error: missing apk-tools-static package (-a) value"
	exit 1
fi

if [[ ! -e ${INSTALL_DIR} ]] ; then
	echo "Directory $INSTALL_DIR not found"
	exit 1
fi

if [[ -z ${INSTALL_DIR} ]]; then
	echo "Error: missing install directory (-d) value"
	exit 1
fi

if [[ -z ${MIRROR} ]]; then
	echo "Error: missing mirror (-m) value"
	exit 1
fi

if [[ -z ${IMAGE_NAME} ]]; then
	echo "Error: missing image name (-i) value"
	exit 1
fi

if [[ -z ${NAME} ]]; then
	echo "Error: missing proper name (-p) value"
	exit 1
fi

TARGET="${IMAGE_NAME}-${BUILD_DATE}.tar.gz"

if [[ -z ${DOCS} ]]; then
	DOCS="https://docs.joyent.com/images/container-native-linux"
fi

echo "==> Installing Alpine into $INSTALL_DIR"

if [[ -d $INSTALL_DIR ]]; then
	echo "====> Found previous chroot. Deleting and creating a new one."

	if [[ $(mount | grep -c $INSTALL_DIR/proc) -gt 0 ]]; then
		umount $INSTALL_DIR/proc
  fi

	if [[ $(mount | grep -c $INSTALL_DIR/sys) -gt 0 ]]; then
		umount $INSTALL_DIR/sys
	fi

	rm -rf $INSTALL_DIR
	mkdir -p $INSTALL_DIR
fi

echo "===> Getting Alpine $RELEASE..."

if [[ ! -d tmp/ ]]; then
	echo "===> creating tmp/ directory"
	mkdir tmp
fi

cd tmp/

curl -sSO -f $MIRROR/v$RELEASE/main/x86_64/$APK_TOOLS

echo "==> Extracting $APK_TOOLS"
tar -xzf $APK_TOOLS

echo "==> Adding alpine-devel@lists.alpinelinux.org keys"
mkdir -p $INSTALL_DIR/etc/apk/keys

alpinekeys=( 4a6a0840 4d07755e 5243ef4b 524d27bb 5261cecb )

for key in "${alpinekeys[@]}"; do
	curl -sSo $INSTALL_DIR/etc/apk/keys/alpine-devel@lists.alpinelinux.org-$key.rsa.pub https://alpinelinux.org/keys/alpine-devel%40lists.alpinelinux.org-$key.rsa.pub
done

echo "===> Installing Alpine base"
./sbin/apk.static -X $MIRROR/v$RELEASE/main -U --root $INSTALL_DIR --initdb add alpine-base

cd ..

echo "==> Setting up resolv.conf"
echo "nameserver 8.8.8.8" > $INSTALL_DIR/etc/resolv.conf
echo "nameserver 8.8.4.4" >> $INSTALL_DIR/etc/resolv.conf

echo "==> Setting up apk repositories using $MIRROR"
mkdir -p $INSTALL_DIR/etc/apk

cat << APK > $INSTALL_DIR/etc/apk/repositories
$MIRROR/v$RELEASE/main
$MIRROR/v$RELEASE/community
APK

echo "==> Mounting /proc /sys and /dev in the $INSTALL_DIR"
mount -t proc none $INSTALL_DIR/proc
mount -o bind /sys $INSTALL_DIR/sys

echo "==> Setting TZ to UTC"
chroot $INSTALL_DIR apk add --update tzdata
cp $INSTALL_DIR/usr/share/zoneinfo/UTC $INSTALL_DIR/etc/localtime
chroot $INSTALL_DIR apk del --purge tzdata

echo "==> Installing packages..."
chroot $INSTALL_DIR apk update
chroot $INSTALL_DIR apk add --update bash curl gettext less man ncurses-terminfo openssh vim wget

echo "==> Removing Linux kernel packages"
#chroot $INSTALL_DIR apk del --purge linux-grsec

echo "==> Make sure apk packages are up-to-date"
chroot $INSTALL_DIR apk upgrade

echo "==> Disabling PasswordAuthentication"
sed -ri s/^#?PasswordAuthentication\ no/PasswordAuthentication\ no/ -i $INSTALL_DIR/etc/ssh/sshd_config
sed -ri s/^#?PasswordAuthentication\ yes/PasswordAuthentication\ no/ -i $INSTALL_DIR/etc/ssh/sshd_config

echo "==> Enabling UsePrivilegeSeparation (default is 'sandbox')"
sed s/UsePrivilegeSeparation\ sandbox/UsePrivilegeSeparation\ yes/ -i $INSTALL_DIR/etc/ssh/sshd_config
sed s/#UsePrivilegeSeparation\ yes/UsePrivilegeSeparation\ yes/ -i $INSTALL_DIR/etc/ssh/sshd_config

echo "==> Adding initscripts to make sure Alpine is bootable"
chroot $INSTALL_DIR rc-update add devfs sysinit
chroot $INSTALL_DIR rc-update add dmesg sysinit
chroot $INSTALL_DIR rc-update add mdev sysinit

chroot $INSTALL_DIR rc-update add bootmisc boot
chroot $INSTALL_DIR rc-update add hostname boot
chroot $INSTALL_DIR rc-update add hwclock boot
chroot $INSTALL_DIR rc-update add modules boot
chroot $INSTALL_DIR rc-update add networking boot
chroot $INSTALL_DIR rc-update add sysctl boot
chroot $INSTALL_DIR rc-update add syslog boot

chroot $INSTALL_DIR rc-update add crond default
chroot $INSTALL_DIR rc-update add local default
chroot $INSTALL_DIR rc-update add sshd default

chroot $INSTALL_DIR rc-update add mount-ro shutdown
chroot $INSTALL_DIR rc-update add killprocs shutdown
chroot $INSTALL_DIR rc-update add savecache shutdown

echo "==> Making /sbin/init symlink relative"
rm $INSTALL_DIR/sbin/init
pushd $PWD
cd $INSTALL_DIR/sbin/
ln -s ../bin/busybox init
popd

#echo "==> Making /usr/bin/su symlink relative"
#rm $INSTALL_DIR/usr/bin/su
#pushd $PWD
#cd $INSTALL_DIR/usr/bin/
#ln -s ../../bin/bbsuid ./su
#popd

echo "==> Creating /etc/motd"
cat << MOTD > $INSTALL_DIR/etc/motd
   __        .                   .
 _|  |_      | .-. .  . .-. :--. |-
|_    _|     ;|   ||  |(.-' |  | |
  |__|   \`--'  \`-' \`;-| \`-' '  ' \`-'
                   /  ;  Instance ($NAME $BUILD_DATE)
                   \`-'   $DOCS

MOTD

echo "==> Creating /etc/product file"
cat << PRODUCT > $INSTALL_DIR/etc/product
Name: Joyent Instance
Image: $NAME $BUILD_DATE
Documentation: $DOCS
Description: $DESC
PRODUCT

echo "==> Installing Guest tools in $INSTALL_DIR"
echo "====> Initiallizing and fetching submodule $GUESTTOOLS"
git submodule init
git submodule update

echo "====> Running ./install.sh -i $INSTALL_DIR"
(
	cd $GUESTTOOLS
	./install.sh -i $INSTALL_DIR
)

echo "==> Saving installation as $TARGET. This may take a few minutes."
tar czf $TARGET --exclude-from=exclude.txt $INSTALL_DIR/

echo "==> Installation complete!"
echo "==> $TARGET"

exit 0
